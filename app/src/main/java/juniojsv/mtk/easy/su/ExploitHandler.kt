package juniojsv.mtk.easy.su

import android.content.Context
import android.content.SharedPreferences
import androidx.core.content.edit
import java.io.File
import java.io.FileOutputStream

data class ExploitResult(val wasSucceeded: Boolean, val log: String)

class ExploitHandler(
    private val context: Context,
    onPostExecute: (result: ExploitResult) -> Unit
) : CoroutineTask<ExploitResult>(onPostExecute) {

    private val preferences: SharedPreferences =
        context.getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE)

    override fun onPreExecute() {
        context.getString(R.string.executing_script).toast(context, true)
    }

    override fun doInBackground(): ExploitResult {
        val log = StringBuilder("Mtk-easy-su ${BuildConfig.VERSION_NAME}\n")
        with(context) {
            if (filesDir.absoluteFile.listFiles()?.isEmpty() == true ||
                preferences.getString(
                    PREF_EXTRACTED_BY_VERSION,
                    String()
                ) != BuildConfig.VERSION_NAME ||
                BuildConfig.DEBUG
            ) {

                preferences.edit(true) {
                    putString(PREF_EXTRACTED_BY_VERSION, BuildConfig.VERSION_NAME)
                }

                File(filesDir.absoluteFile, "64").mkdir()
                File(filesDir.absoluteFile, "32").mkdir()
                assets?.list("")?.forEach { name ->
                    when (name) {
                        "magisk-boot.sh", "magiskinit32", "magiskinit64", "mtk-su32", "mtk-su64" -> {
                            val file: File =
                                when {
                                    name.endsWith("32") -> File(
                                        File("${filesDir.absolutePath}/32"),
                                        name.removeSuffix("32")
                                    )
                                    name.endsWith("64") -> File(
                                        File("${filesDir.absolutePath}/64"),
                                        name.removeSuffix("64")
                                    )
                                    else -> File(filesDir.absoluteFile, name)
                                }
                            val output = FileOutputStream(file)
                            assets.open(name).copyTo(output, 512)
                            output.close()
                            try {
                                Runtime.getRuntime().exec("chmod 700 ${file.absolutePath}")
                                    .waitFor()
                            } catch (e: Exception) {
                                log.append(e.message)
                            }
                        }
                    }
                }
            }
        }

        val runAs64 = preferences.getBoolean(PREF_RUN_AS_64_BITS, false)

        arrayOf(
            "getprop ro.vendor.product.model",
            "date",
            "ls -R -1 -h -g ${context.filesDir.absolutePath}",
            "cat /proc/cpuinfo", "cat /proc/meminfo",
            "free", "cat /proc/version",
            "sh ${context.filesDir.absolutePath}/magisk-boot.sh ${if (runAs64) "64" else "32"}"
        ).forEach { command ->
            try {
                log.append(Runtime.getRuntime().exec(command).getOutput())
            } catch (e: Exception) {
                log.append(e.message)
            }
        }

        val wasSucceeded = File("/sbin/su").exists()

        return ExploitResult(wasSucceeded, log.toString())
    }

}